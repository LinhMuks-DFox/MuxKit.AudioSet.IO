#!/usr/bin/env python3

import os
import json
import subprocess
from datetime import datetime

# 要统计的文件夹路径
FOLDER_PATH = '.'
# 保存统计结果的文件路径
STATS_FILE = 'folder_stats.json'
# 子文件夹名称模式
SUBFOLDER_PATTERN = 'unbalanced_train_segments_{}.csv.splits'
SUBFOLDER_RANGE = range(1, 24)  # 1到23

# ANSI 颜色代码
COLOR_GREEN = '\033[92m'
COLOR_RESET = '\033[0m'

def get_folder_stats(folder_path):
    """统计文件夹内特定子文件夹的文件数量和大小"""
    stats = {}
    total_files = 0
    total_size = 0

    for i in SUBFOLDER_RANGE:
        subfolder_name = SUBFOLDER_PATTERN.format(i)
        subfolder_path = os.path.join(folder_path, subfolder_name)
        if os.path.exists(subfolder_path):
            num_files = len(os.listdir(subfolder_path))
            size_result = subprocess.run(['du', '-sh', subfolder_path], capture_output=True, text=True)
            size = size_result.stdout.split()[0]  # 获取大小
            stats[subfolder_name] = {'num_files': num_files, 'size': size}
            
            # 转换大小为字节数
            size_in_bytes = convert_size_to_bytes(size)
            total_files += num_files
            total_size += size_in_bytes
    
    stats['total'] = {'num_files': total_files, 'size': convert_bytes_to_human_readable(total_size)}
    return stats

def convert_size_to_bytes(size):
    """将人类可读的大小转换为字节数"""
    size_units = {'K': 1024, 'M': 1024 ** 2, 'G': 1024 ** 3, 'T': 1024 ** 4}
    if size[-1].isdigit():  # 没有单位，假设是字节
        return int(size)
    else:
        unit = size[-1]
        number = float(size[:-1])
        return int(number * size_units[unit.upper()])

def convert_bytes_to_human_readable(size_in_bytes):
    """将字节数转换为人类可读的大小"""
    for unit in ['B', 'K', 'M', 'G', 'T']:
        if size_in_bytes < 1024:
            return f"{size_in_bytes}{unit}"
        size_in_bytes /= 1024
    return f"{size_in_bytes}T"

def load_previous_stats(file_path):
    """加载之前的统计数据"""
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return json.load(file)
    return {}

def save_current_stats(file_path, stats):
    """保存当前的统计数据"""
    with open(file_path, 'w') as file:
        json.dump(stats, file, indent=4)

def calculate_differences(previous_stats, current_stats):
    """计算前后两次运行的区别"""
    differences = {}
    for folder, current_data in current_stats.items():
        if folder in previous_stats:
            previous_data = previous_stats[folder]
            num_files_diff = current_data['num_files'] - previous_data['num_files']
            size_diff = f"{current_data['size']} (previous: {previous_data['size']})"
            differences[folder] = {'num_files_diff': num_files_diff, 'size_diff': size_diff}
        else:
            differences[folder] = {'num_files_diff': current_data['num_files'], 'size_diff': current_data['size']}
    return differences

def main():
    current_stats = get_folder_stats(FOLDER_PATH)
    previous_stats = load_previous_stats(STATS_FILE)
    differences = calculate_differences(previous_stats, current_stats)
    save_current_stats(STATS_FILE, current_stats)

    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"Statistics as of {timestamp}:\n")
    for folder, diff in differences.items():
        num_files_diff = f"{COLOR_GREEN}{diff['num_files_diff']}{COLOR_RESET}" if diff['num_files_diff'] > 0 else diff['num_files_diff']
        size_diff = f"{COLOR_GREEN}{diff['size_diff']}{COLOR_RESET}" if "previous" not in diff['size_diff'] or "previous: 0" in diff['size_diff'] else diff['size_diff']
        
        print(f"Folder: {folder}")
        print(f"  Number of files difference: {num_files_diff}")
        print(f"  Size difference: {size_diff}\n")

if __name__ == "__main__":
    main()
