"""
Author: LinhMuks
Date: 2023-7-23 (last update)
Description:
    After download the AudioSet via project: https://github.com/ykinolab-tokai/AudioSetDownloader.git
    A *split-pos.csv file will be generated, contains information about the label and sample:
    --PJHxphWEs.wav, "/m/09x0r,/t/dd00088"
    where the first column is the file name, the second column is the label.

    There are cases where the csv file generated by Downloader has meaningless items in it, which is not expected, and,
    when it comes to actually doing machine learning, it is more desirable for the Label of the DataSet to be a number
    or human-readable text, and not the Ontology itself.

    This script will read a *split-pos.csv, read the class_labels_indices.json which generated by ClassLabel2Json.py,
    generate a new json file in this format:

    "0": {
        "path": "eval_segments_4000.csv.splits/--4gqARaEJE.wav",
        "onto": [
            "/m/068hy",
            "/m/07q6cd_",
            "/m/0bt9lr",
            "/m/0jbk"
        ],
        "label_digits": [
            "73",
            "361",
            "74",
            "72"
        ],
        "label_display": [
            "Domestic animals, pets",
            "Squeak",
            "Dog",
            "Animal"
        ]
    }
    where the "0" is the index of a sample,
    "path" is the path of the sample,
    "onto" is the ontology of the sample,
    "label_digits" is the label of the sample in digits,
    "label_display" is the label of the sample in human-readable text.
"""
import os
import json
import logging
import csv
import typing

JSON_FILE_OUT_NAME = r"../AudioSet.Meta.Json/AudioSet.bld_train.json"
BALANCED_TRAIN_CSV_FILES = {
    r"../AudioSet.Split.MetaCSV/balanced_train_segments4000.csv.split-pos.csv": "balanced_train_segments4000.csv.splits",
    r"../AudioSet.Split.MetaCSV/balanced_train_segments8000.csv.split-pos.csv": "balanced_train_segments8000.csv.splits",
    r"../AudioSet.Split.MetaCSV/balanced_train_segments12000.csv.split-pos.csv": "balanced_train_segments12000.csv.splits",
    r"../AudioSet.Split.MetaCSV/balanced_train_segments16000.csv.split-pos.csv": "balanced_train_segments16000.csv.splits",
    r"../AudioSet.Split.MetaCSV/balanced_train_segments20000.csv.split-pos.csv": "balanced_train_segments20000.csv.splits",
    r"../AudioSet.Split.MetaCSV/balanced_train_segments24000.csv.split-pos.csv": "balanced_train_segments24000.csv.splits",
}

EVAL_CSV_FILES = {
    r"../AudioSet.Split.MetaCSV/eval_segments_4000.csv.split-pos.csv": "eval_segments_4000.csv.splits",
    r"../AudioSet.Split.MetaCSV/eval_segments_8000.csv.split-pos.csv": "eval_segments_8000.csv.splits",
    r"../AudioSet.Split.MetaCSV/eval_segments_12000.csv.split-pos.csv": "eval_segments_12000.csv.splits",
    r"../AudioSet.Split.MetaCSV/eval_segments_16000.csv.split-pos.csv": "eval_segments_16000.csv.splits",
    r"../AudioSet.Split.MetaCSV/eval_segments_20000.csv.split-pos.csv": "eval_segments_20000.csv.splits",
    r"../AudioSet.Split.MetaCSV/eval_segments_24000.csv.split-pos.csv": "eval_segments_24000.csv.splits",
}

GENERATE_FOR = BALANCED_TRAIN_CSV_FILES

LABEL_DICT_PATH = r"../AudioSet.Meta.Json/class_labels_indices.json"


def main():
    with open(JSON_FILE_OUT_NAME, "w") as f_out, \
            open(LABEL_DICT_PATH, "r") as f_label_dict:
        label_dict = json.load(f_label_dict)
        iota = 0
        json_content = dict()
        for csv_file, data_folder in GENERATE_FOR.items():
            with open(csv_file, "r") as f_in:
                reader = csv.reader(f_in)
                for row in reader:
                    onto = [i.replace('"', '').replace(' ', '') for i in row[1:]]
                    onto = [i for i in filter(lambda x: x != "", onto)]
                    path = f"{data_folder}/{row[0]}"
                    try:
                        label_digits: typing.List[int] = [label_dict[i]["index"] for i in onto]
                        label_display: typing.List[str] = [label_dict[i]["display_name"] for i in onto]
                        json_content[iota] = {
                            "path": path,
                            "onto": onto,
                            "label_digits": label_digits,
                            "label_display": label_display,
                        }
                    except KeyError as ke:
                        print(onto)
                        print(path)
                        raise ke
                    iota += 1
        json.dump(json_content, f_out, indent=4)


if __name__ == "__main__":
    logging.info("Start generating json file for AudioSet dataset.")
    logging.info(f"Generate json for file :{GENERATE_FOR}")
    if os.path.exists(JSON_FILE_OUT_NAME):
        logging.warning(f"File {JSON_FILE_OUT_NAME} already exists, will be overwritten.")
        os.remove(JSON_FILE_OUT_NAME)
    logging.info(f"Generate to file {JSON_FILE_OUT_NAME}")
    main()
